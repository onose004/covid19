"        _
" __   _(_)_ __ ___  _ __ ___
" \ \ / / | '_ ` _ \| '__/ __|
"  \ V /| | | | | | | | | (__
"   \_/ |_|_| |_| |_|_|  \___|
"

" BUNDLE {{{1

if 0 | endif

if &compatible
  set nocompatible
endif

set runtimepath+=~/.vim/bundle/neobundle.vim/

call neobundle#begin(expand('~/.vim/bundle/'))

NeoBundleFetch 'Shougo/neobundle.vim'

" view
NeoBundle 'arcticicestudio/nord-vim'
" NeoBundle 'simeji/winresizer'
"   let g:winresizer_vert_resize = 1
"   let g:winresizer_horiz_resize = 1
" NeoBundle 'vim-airline/vim-airline'
" NeoBundle 'vim-airline/vim-airline-themes'
"   let g:airline#extensions#tabline#enabled = 1
"NeoBundle 'Yggdroot/indentLine'


" util
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'itchyny/lightline.vim'
NeoBundle 'mattn/emmet-vim'
" NeoBundle 'preservim/nerdtree'
"   nnoremap <silent> <Leader>t :<C-u>NERDTreeToggle<CR>
"   nnoremap <silent> <Leader>f :<C-u>NERDTreeFind %<CR>
" NeoBundle 'Xuyuanp/nerdtree-git-plugin'
" NeoBundle 'w0rp/ale'
" NeoBundle 'dhruvasagar/vim-table-mode'
" NeoBundle 'mattn/sonictemplate-vim'
  let g:sonictemplate_vim_template_dir = ['~/.vim/template']
" NeoBundle 'thinca/vim-quickrun'
"   nnoremap <Leader>r :<C-U>QuickRun<CR>
"   xnoremap <Leader>r gv:<C-U>QuickRun<CR>
" NeoBundle 'tpope/vim-fugitive'

" ts/js
" NeoBundle 'leafgarland/typescript-vim'
" NeoBundle 'peitalin/vim-jsx-typescript'
" NeoBundle 'maxmellon/vim-jsx-pretty'
" NeoBundle 'neoclide/coc.nvim'
"  " 保存時のみ実行する
"  let g:ale_lint_on_text_changed = 0
"  " 表示に関する設定
"  let g:ale_sign_error = 'X'
"  let g:ale_sign_warning = '!'
"  let g:airline#extensions#ale#open_lnum_symbol = '('
"  let g:airline#extensions#ale#close_lnum_symbol = ')'
"  let g:ale_echo_msg_format = '[%linter%]%code: %%s'
"  highlight link ALEErrorSign Tag
"  highlight link ALEWarningSign StorageClass
"  " Ctrl + kで次の指摘へ、Ctrl + jで前の指摘へ移動
"  nmap <silent> <C-k> <Plug>(ale_previous_wrap)
"  nmap <silent> <C-j> <Plug>(ale_next_wrap)

"NeoBundle 'Shougo/vimproc.vim', {
"\ 'build' : {
"\     'windows' : 'tools\\update-dll-mingw',
"\     'cygwin' : 'make -f make_cygwin.mak',
"\     'mac' : 'make -f make_mac.mak',
"\     'linux' : 'make',
"\     'unix' : 'gmake',
"\    },
"\ }


call neobundle#end()
filetype plugin indent on
NeoBundleCheck

" }}}1

" VIEW {{{1

set mouse=a
set synmaxcol=320
set hlsearch
set number
syntax on
set colorcolumn=80
autocmd! FileType markdown hi! def link markdownItalic Label

if has('conceal')
  set conceallevel=0 concealcursor=
endif

set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set autoindent
set smartindent

silent! colorscheme nord 
let g:lightline = {'colorscheme': 'nord'}

let g:php_sql_query           = 1
let g:php_baselib             = 1
let g:php_htmlInStrings       = 1
let g:php_noShortTags         = 1
let g:php_parent_error_close  = 1

autocmd FileType php,ctp :set dictionary=~/.vim/dict/php.dict

" }}}1

" LANG {{{1

set encoding=utf-8
set fileencodings=utf-8,iso-2022-jp,euc-jp,sjis
set fileformats=unix,dos,mac

" }}}1

" MAP {{{1

map <F2> :.w !pbcopy<CR><CR>
map <F8> :let mycurf=expand("<cfile>")<cr><c-w> w :execute("e ".mycurf)<cr><c-w>p

command Bd bp|bd #
nnoremap <Space>s :source $HOME/.vimrc<CR>
nnoremap <silent>k<Space>w :<C-u>w<CR>
nnoremap <Space><Space> <c-^>

" copy to attached terminal using the yank(1) script:
" https://github.com/sunaku/home/blob/master/bin/yank
function! Yank(text) abort
  let escape = system('yank', a:text)
  if v:shell_error
    echoerr escape
  else
    call writefile([escape], '/dev/tty', 'b')
  endif
endfunction
noremap <silent> <Leader>y y:<C-U>call Yank(@0)<CR>



" }}}1

" OPTION {{{1

" enable backspace
set backspace=indent,eol,start

" clipboard
set clipboard=unnamed,autoselect


" lightline
set laststatus=2
set showtabline=2
set noshowmode

autocmd BufRead,BufNewFile *.php set filetype=html

set fdm=marker

" files
autocmd BufNewFile,BufRead *.tsx set filetype=typescript.tsx

set backupcopy=yes

" }}}1

" vim: fdm=marker ts=2 sts=2 sw=2:
